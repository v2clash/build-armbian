name: Kernel_compilation_rockchip

on:
  workflow_dispatch:
  repository_dispatch:
    
env:
  TZ: Asia/Shanghai

jobs:
  Checka:
    runs-on: ubuntu-latest
    env:
      REPO_URL_Kernel61: https://github.com/unifreq/linux-6.1.y-rockchip
      REPO_BRANCH_Kernel61: main
      REPO_PATH_Kernel61: "Kernel_61_rockchip"
      
    outputs:
      unifreq: ${{ steps.outputunifreq.outputs.unifreq }}
    
    steps:
    - name: Clone and Get Commit Hash
      id: clone_and_get_hash
      run: |        
        git clone --depth 1 $REPO_URL_Kernel61_rockchip -b $REPO_BRANCH_Kernel61_rockchip $REPO_PATH_Kernel61_rockchip
        cd $REPO_PATH_Kernel61_rockchip
        echo "commitHash_Kernel61_rockchip=$(git rev-parse HEAD)" >> $GITHUB_ENV
        
    - name: Show Commit Head and Combination Heads
      id: combHeader
      run: |
        echo "commitHash_Kernel61_rockchip: ${{ env.commitHash_Kernel61_rockchip }}"
        
    - name: Compare Commit Hash
      id: cacheHash
      uses: actions/cache@main
      with:
        path: ${{ github.workspace }}
        key: ${{ runner.os }}-commitHash-${{ env.commitHash_Kernel61_rockchip }}
   
    - name: Set output for next job
      id: outputunifreq
      if: steps.cacheHash.outputs.cache-hit == 'true'
      run: |
        echo "unifreq=hello" >> $GITHUB_OUTPUT
        
    - name: Save New Commit Hash
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        echo ${{ env.commitHash_Kernel61_rockchip }} > $GITHUB_WORKSPACE/commitHash_Kernel61_rockchip

  Build_Kernel61_rockchip:
    needs: [Checka]   
    if: ${{ needs.Checka.outputs.output != 'hello' || github.event.inputs.checkupdates == 'true'}}
    runs-on: ubuntu-22.04-arm

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Initialization environment
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi $(docker images -q) 2>/dev/null
          [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android 2>/dev/null
          sudo swapoff -a
          sudo rm -f /swapfile /mnt/swapfile
          sudo -E apt-get -y update
          sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
          sudo -E apt-get -y install $(curl -fsSL https://tinyurl.com/ubuntu2204-build-armbian)
          sudo -E systemctl daemon-reload
          #sudo -E apt-get -y full-upgrade
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          sudo sed -i '/NVM_DIR/d;/skel/d' /root/{.bashrc,.profile}
          sudo rm -rf ~/{.cargo,.dotnet,.rustup}
          sudo timedatectl set-timezone "${TZ}"
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Create simulated physical disk
        id: disk
        run: |
          mnt_size=$(expr $(df -h /mnt | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 1)
          root_size=$(expr $(df -h / | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 4)
          sudo truncate -s "${mnt_size}"G /mnt/mnt.img
          sudo truncate -s "${root_size}"G /root.img
          sudo losetup /dev/loop6 /mnt/mnt.img
          sudo losetup /dev/loop7 /root.img
          sudo pvcreate /dev/loop6
          sudo pvcreate /dev/loop7
          sudo vgcreate github /dev/loop6 /dev/loop7
          sudo lvcreate -n runner -l 100%FREE github
          sudo mkfs.xfs /dev/github/runner
          sudo mkdir -p /builder
          sudo mount /dev/github/runner /builder
          sudo chown -R runner.runner /builder
          df -hT

      - name: Create a mapped directory
        id: mapped
        working-directory: /builder
        run: |
          df -hT ${PWD}
          mkdir -p /builder/{kernel,output}
          ln -sf /builder/kernel /home/runner/work/_actions/v2clash/build-armbian/main/compile-kernel/kernel
          ln -sf /builder/output /home/runner/work/_actions/v2clash/build-armbian/main/compile-kernel/output
          echo "status=success" >> ${GITHUB_OUTPUT}
          
      - name: Compile the kernel for Amlogic s9xxx
        uses: v2clash/build-armbian@main
        with:
          build_target: kernel
          kernel_source: ${{ inputs.kernel_source }}
          kernel_version: 6.1
          kernel_auto: ${{ inputs.kernel_auto }}
          delete_source: ${{ inputs.delete_source }}
          kernel_package: ${{ inputs.kernel_package }}
          kernel_sign: ${{ inputs.kernel_sign }}
          kernel_toolchain: ${{ inputs.kernel_toolchain }}
          compress_format: ${{ inputs.compress_format }}
          silent_log: ${{ inputs.silent_log }}

      - name: Upload Kernel to Release
        uses: ncipollo/release-action@main
        if: env.PACKAGED_STATUS == 'success' && !cancelled()
        with:
          name: kernel_rk35xx
          tag: kernel_rk35xx
          artifacts: ${{ env.PACKAGED_OUTPUTPATH }}/*
          allowUpdates: true
          removeArtifacts: false
          replacesArtifacts: true
          token: ${{ secrets.GH_TOKEN }}
          body: |
            - 这是 `Rockchip rk3528/rk3566/rk3568` 专用内核，和其他系列不通用。

  Cleaning:
    if: ${{ always() }}
    needs: [Build_Kernel61_rockchip]    
    runs-on: ubuntu-latest
    steps:  
      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          retain_days: 0
          keep_minimum_runs: 3
